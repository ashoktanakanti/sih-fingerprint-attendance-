import React, { useState, useEffect } from 'react';
import { Users, Wifi, WifiOff, Calendar, BarChart3, ArrowLeft, Fingerprint } from 'lucide-react';

const AttendanceApp = () => {
  const [currentView, setCurrentView] = useState('login');
  const [isOffline, setIsOffline] = useState(false);
  const [selectedClass, setSelectedClass] = useState('');
  const [attendanceData, setAttendanceData] = useState({});
  const [scanningStudent, setScanningStudent] = useState(null);
  const [showScanner, setShowScanner] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);
  const [scannedStudentName, setScannedStudentName] = useState('');

  // Sample data for demonstration
  const classes = ['Class 5A', 'Class 5B', 'Class 6A'];
  const students = {
    'Class 5A': [
      { id: '001', name: '‡§∞‡§µ‡§ø ‡§ï‡•Å‡§Æ‡§æ‡§∞', nameEn: 'Ravi Kumar', photo: 'üë¶' },
      { id: '002', name: '‡§™‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∂‡§∞‡•ç‡§Æ‡§æ', nameEn: 'Priya Sharma', photo: 'üëß' },
      { id: '003', name: '‡§Ö‡§Æ‡§ø‡§§ ‡§∏‡§ø‡§Ç‡§π', nameEn: 'Amit Singh', photo: 'üë¶' },
      { id: '004', name: '‡§∏‡•ç‡§®‡•á‡§π‡§æ ‡§™‡§ü‡•á‡§≤', nameEn: 'Sneha Patel', photo: 'üëß' },
      { id: '005', name: '‡§∞‡•ã‡§π‡§ø‡§§ ‡§ó‡•Å‡§™‡•ç‡§§‡§æ', nameEn: 'Rohit Gupta', photo: 'üë¶' },
      { id: '006', name: '‡§ï‡§æ‡§µ‡•ç‡§Ø‡§æ ‡§∞‡•á‡§°‡•ç‡§°‡•Ä', nameEn: 'Kavya Reddy', photo: 'üëß' }
    ]
  };

  // Simulate fingerprint scanning
  const simulateFingerprint = (studentId) => {
    setScanningStudent(studentId);
    setShowScanner(true);
    
    // Find student name for success message
    const student = students[selectedClass]?.find(s => s.id === studentId);
    const studentName = student?.name || 'Demo Student';
    
    setTimeout(() => {
      setAttendanceData(prev => ({
        ...prev,
        [selectedClass]: {
          ...prev[selectedClass],
          [studentId]: {
            status: 'present',
            time: new Date().toLocaleTimeString(),
            method: 'fingerprint'
          }
        }
      }));
      setScanningStudent(null);
      setShowScanner(false);
      
      // Show success popup
      setScannedStudentName(studentName);
      setShowSuccess(true);
      
      // Auto-hide success popup after 2 seconds
      setTimeout(() => {
        setShowSuccess(false);
      }, 2000);
    }, 3000);
  };

  const toggleAttendance = (studentId) => {
    const currentStatus = attendanceData[selectedClass]?.[studentId]?.status;
    setAttendanceData(prev => ({
      ...prev,
      [selectedClass]: {
        ...prev[selectedClass],
        [studentId]: {
          status: currentStatus === 'present' ? 'absent' : 'present',
          time: new Date().toLocaleTimeString(),
          method: 'manual'
        }
      }
    }));
  };

  // Mobile-optimized Login View
  const LoginView = () => (
    <div className="min-h-screen bg-gradient-to-br from-blue-600 to-green-600 flex flex-col">
      <div className="h-8"></div>
      
      <div className="flex-1 flex flex-col justify-center px-6">
        <div className="bg-white rounded-3xl shadow-2xl p-8">
          <div className="text-center mb-8">
            <div className="bg-blue-100 rounded-full w-24 h-24 flex items-center justify-center mx-auto mb-6">
              <Users className="w-12 h-12 text-blue-600" />
            </div>
            <h1 className="text-3xl font-bold text-gray-800 mb-2">‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§â‡§™‡§∏‡•ç‡§•‡§ø‡§§‡§ø</h1>
            <p className="text-gray-600 text-lg">Smart Attendance System</p>
            <p className="text-sm text-gray-500 mt-2">For Rural Schools</p>
          </div>
          
          <div className="space-y-6">
            <div>
              <input
                type="text"
                placeholder="Teacher ID / ‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï ‡§Ü‡§à‡§°‡•Ä"
                className="w-full px-6 py-4 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg"
                defaultValue="T001"
              />
            </div>
            <div>
              <input
                type="password"
                placeholder="PIN / ‡§™‡§ø‡§®"
                className="w-full px-6 py-4 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg"
                defaultValue="1234"
              />
            </div>
            <button
              onClick={() => setCurrentView('dashboard')}
              className="w-full bg-gradient-to-r from-blue-600 to-blue-700 text-white py-4 rounded-xl font-semibold text-lg hover:from-blue-700 hover:to-blue-800 transition-all transform active:scale-95 shadow-lg"
            >
              Login / ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡•á‡§Ç
            </button>
          </div>
        </div>
        
        <div className="mt-6 text-center">
          <div className="bg-white bg-opacity-20 rounded-full px-4 py-2 inline-flex items-center space-x-2">
            {isOffline ? <WifiOff className="w-5 h-5 text-red-300" /> : <Wifi className="w-5 h-5 text-green-300" />}
            <span className="text-white font-medium">
              {isOffline ? '‡§ë‡§´‡§≤‡§æ‡§á‡§® ‡§Æ‡•ã‡§° / Offline Mode' : '‡§ï‡§®‡•á‡§ï‡•ç‡§ü‡•á‡§° / Connected'}
            </span>
          </div>
        </div>
      </div>
    </div>
  );

  // Mobile-optimized Dashboard
  const DashboardView = () => (
    <div className="min-h-screen bg-gray-50">
      <div className="bg-gradient-to-r from-blue-600 to-blue-700 text-white px-4 py-6 pb-8">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-xl font-bold">Smart Attendance</h1>
          <div className="flex items-center space-x-3">
            {isOffline ? <WifiOff className="w-5 h-5" /> : <Wifi className="w-5 h-5" />}
            <button
              onClick={() => setIsOffline(!isOffline)}
              className="text-xs bg-blue-800 px-3 py-2 rounded-full font-medium"
            >
              {isOffline ? 'Online' : 'Offline'}
            </button>
          </div>
        </div>
        
        <div className="grid grid-cols-3 gap-3">
          <div className="bg-white bg-opacity-20 rounded-2xl p-4 text-center">
            <div className="text-2xl font-bold">156</div>
            <div className="text-sm opacity-90">‡§â‡§™‡§∏‡•ç‡§•‡§ø‡§§ / Present</div>
          </div>
          <div className="bg-white bg-opacity-20 rounded-2xl p-4 text-center">
            <div className="text-2xl font-bold">24</div>
            <div className="text-sm opacity-90">‡§Ö‡§®‡•Å‡§™‡§∏‡•ç‡§•‡§ø‡§§ / Absent</div>
          </div>
          <div className="bg-white bg-opacity-20 rounded-2xl p-4 text-center">
            <div className="text-2xl font-bold">87%</div>
            <div className="text-sm opacity-90">‡§â‡§™‡§∏‡•ç‡§•‡§ø‡§§‡§ø / Attendance</div>
          </div>
        </div>
      </div>

      <div className="px-4 -mt-4">
        <div className="bg-white rounded-2xl shadow-lg p-6 mb-6">
          <h2 className="text-xl font-bold text-gray-800 mb-4">‡§ï‡§ï‡•ç‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç / Select Class</h2>
          <div className="grid grid-cols-1 gap-3">
            {classes.map(cls => (
              <button
                key={cls}
                onClick={() => {
                  setSelectedClass(cls);
                  setCurrentView('attendance');
                }}
                className="bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white py-4 px-6 rounded-xl font-semibold text-lg transition-all transform active:scale-95 shadow-md"
              >
                üìö {cls} ({students['Class 5A']?.length || 0} students)
              </button>
            ))}
          </div>
        </div>

        <div className="grid grid-cols-2 gap-4 mb-6">
          <button
            onClick={() => setCurrentView('reports')}
            className="bg-white rounded-2xl shadow-lg p-6 hover:shadow-xl transition-all transform active:scale-95"
          >
            <BarChart3 className="w-12 h-12 text-purple-600 mb-3" />
            <div className="text-left">
              <div className="font-bold text-gray-800 text-lg">‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü</div>
              <div className="text-sm text-gray-500">Reports</div>
            </div>
          </button>
          
          <button className="bg-white rounded-2xl shadow-lg p-6 hover:shadow-xl transition-all transform active:scale-95">
            <Calendar className="w-12 h-12 text-orange-600 mb-3" />
            <div className="text-left">
              <div className="font-bold text-gray-800 text-lg">‡§á‡§§‡§ø‡§π‡§æ‡§∏</div>
              <div className="text-sm text-gray-500">History</div>
            </div>
          </button>
        </div>
      </div>
    </div>
  );

  // Success Popup
  const SuccessPopup = () => {
    if (!showSuccess) return null;
    
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-3xl p-8 text-center max-w-sm w-full animate-bounce">
          <div className="mb-4">
            <div className="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <div className="text-4xl">‚úÖ</div>
            </div>
            <h3 className="text-2xl font-bold text-green-600 mb-2">Success!</h3>
            <p className="text-gray-800 font-semibold">{scannedStudentName}</p>
            <p className="text-green-600 text-sm">‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§∏‡•ç‡§ï‡•à‡§® ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ</p>
            <p className="text-green-600 text-sm">Successfully Scanned</p>
          </div>
          
          <div className="text-sm text-gray-500">
            Attendance marked at {new Date().toLocaleTimeString()}
          </div>
        </div>
      </div>
    );
  };

  // Fingerprint Scanner Overlay
  const FingerprintScanner = () => {
    if (!showScanner) return null;
    
    return (
      <div className="fixed inset-0 bg-black bg-opacity-90 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-3xl p-8 text-center max-w-sm w-full">
          <div className="mb-6">
            <div className="animate-pulse">
              <Fingerprint className="w-24 h-24 text-blue-600 mx-auto mb-4" />
            </div>
            <h3 className="text-2xl font-bold text-gray-800 mb-2">Scanning...</h3>
            <p className="text-gray-600">‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§â‡§Ç‡§ó‡§≤‡•Ä ‡§∏‡•ç‡§ï‡•à‡§®‡§∞ ‡§™‡§∞ ‡§∞‡§ñ‡•á‡§Ç</p>
            <p className="text-gray-600 text-sm">Please place finger on scanner</p>
          </div>
          
          <div className="flex justify-center mb-4">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          </div>
          
          <button
            onClick={() => {
              setShowScanner(false);
              setScanningStudent(null);
            }}
            className="text-gray-500 text-sm"
          >
            Cancel / ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç
          </button>
        </div>
      </div>
    );
  };

  // Mobile Attendance View
  const AttendanceView = () => {
    const classStudents = students[selectedClass] || [];
    const presentCount = Object.values(attendanceData[selectedClass] || {}).filter(a => a.status === 'present').length;
    
    return (
      <div className="min-h-screen bg-gray-50">
        <div className="bg-gradient-to-r from-green-600 to-green-700 text-white px-4 py-6">
          <div className="flex items-center justify-between mb-4">
            <button
              onClick={() => setCurrentView('dashboard')}
              className="p-2 rounded-full bg-white bg-opacity-20 hover:bg-opacity-30 transition-all"
            >
              <ArrowLeft className="w-6 h-6" />
            </button>
            <h1 className="text-xl font-bold">{selectedClass}</h1>
            <div className="text-right">
              <div className="text-sm opacity-90">{new Date().toLocaleDateString()}</div>
              <div className="text-xs opacity-75">‡§Ü‡§ú / Today</div>
            </div>
          </div>
          
          <div className="bg-white bg-opacity-20 rounded-2xl p-4 text-center">
            <div className="text-3xl font-bold">{presentCount}/{classStudents.length}</div>
            <div className="text-sm opacity-90">‡§â‡§™‡§∏‡•ç‡§•‡§ø‡§§ / Present</div>
          </div>
        </div>

        <div className="px-4 -mt-4">
          <div className="bg-white rounded-2xl shadow-lg mb-6 p-6">
            <div className="text-center mb-4">
              <Fingerprint className="w-16 h-16 text-blue-600 mx-auto mb-3" />
              <h3 className="text-lg font-bold text-gray-800">Fingerprint Scanner Ready</h3>
              <p className="text-gray-600 text-sm">‡§´‡§ø‡§Ç‡§ó‡§∞‡§™‡•ç‡§∞‡§ø‡§Ç‡§ü ‡§∏‡•ç‡§ï‡•à‡§®‡§∞ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•à</p>
            </div>
            
            <button
              onClick={() => simulateFingerprint('demo')}
              className="w-full bg-gradient-to-r from-blue-600 to-blue-700 text-white py-4 rounded-xl font-semibold text-lg hover:from-blue-700 hover:to-blue-800 transition-all transform active:scale-95 shadow-md"
            >
              üîç Test Fingerprint Scan
            </button>
          </div>

          <div className="space-y-3 pb-6">
            {classStudents.map(student => {
              const attendance = attendanceData[selectedClass]?.[student.id];
              const isScanning = scanningStudent === student.id;
              
              return (
                <div
                  key={student.id}
                  className={`bg-white rounded-2xl shadow-md p-4 transition-all ${
                    isScanning ? 'bg-yellow-50 border-2 border-yellow-300 shadow-lg' : ''
                  }`}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                      <div className="text-3xl">{student.photo}</div>
                      <div>
                        <div className="font-bold text-gray-800 text-lg">{student.name}</div>
                        <div className="text-sm text-gray-500">ID: {student.id}</div>
                        {attendance && (
                          <div className="text-xs text-green-600 font-medium">
                            ‚úì {attendance.time}
                          </div>
                        )}
                      </div>
                    </div>
                    
                    <div className="flex flex-col space-y-2">
                      {isScanning ? (
                        <div className="flex items-center space-x-2 text-yellow-600 font-medium">
                          <div className="animate-spin text-lg">‚è≥</div>
                          <span className="text-sm">‡§∏‡•ç‡§ï‡•à‡§®...</span>
                        </div>
                      ) : (
                        <div className="space-y-2">
                          <button
                            onClick={() => simulateFingerprint(student.id)}
                            className="bg-blue-100 text-blue-800 px-4 py-2 rounded-lg text-sm font-medium hover:bg-blue-200 transition-colors"
                          >
                            üëÜ Scan
                          </button>
                          
                          <button
                            onClick={() => toggleAttendance(student.id)}
                            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                              attendance?.status === 'present'
                                ? 'bg-green-100 text-green-800 hover:bg-green-200'
                                : 'bg-red-100 text-red-800 hover:bg-red-200'
                            }`}
                          >
                            {attendance?.status === 'present' ? '‡§â‡§™‡§∏‡•ç‡§•‡§ø‡§§ ‚úì' : '‡§Ö‡§®‡•Å‡§™‡§∏‡•ç‡§•‡§ø‡§§ ‚úó'}
                          </button>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
        
        <FingerprintScanner />
        <SuccessPopup />
      </div>
    );
  };

  // Mobile Reports View
  const ReportsView = () => (
    <div className="min-h-screen bg-gray-50">
      <div className="bg-gradient-to-r from-purple-600 to-purple-700 text-white px-4 py-6">
        <div className="flex items-center justify-between">
          <button
            onClick={() => setCurrentView('dashboard')}
            className="p-2 rounded-full bg-white bg-opacity-20 hover:bg-opacity-30 transition-all"
          >
            <ArrowLeft className="w-6 h-6" />
          </button>
          <h1 className="text-xl font-bold">‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü / Reports</h1>
          <div></div>
        </div>
      </div>

      <div className="px-4 py-6 space-y-6">
        <div className="bg-white rounded-2xl shadow-lg p-6">
          <h3 className="text-xl font-bold text-gray-800 mb-4">‡§∏‡§æ‡§™‡•ç‡§§‡§æ‡§π‡§ø‡§ï ‡§µ‡§ø‡§µ‡§∞‡§£ / Weekly Overview</h3>
          <div className="space-y-4">
            {['‡§∏‡•ã‡§Æ‡§µ‡§æ‡§∞/Mon', '‡§Æ‡§Ç‡§ó‡§≤‡§µ‡§æ‡§∞/Tue', '‡§¨‡•Å‡§ß‡§µ‡§æ‡§∞/Wed', '‡§ó‡•Å‡§∞‡•Å‡§µ‡§æ‡§∞/Thu', '‡§∂‡•Å‡§ï‡•ç‡§∞‡§µ‡§æ‡§∞/Fri'].map((day, index) => {
              const percentage = Math.floor(75 + Math.random() * 20);
              return (
                <div key={day} className="flex justify-between items-center">
                  <span className="font-medium">{day}</span>
                  <div className="flex items-center space-x-3">
                    <div className="w-24 bg-gray-200 rounded-full h-3">
                      <div
                        className="bg-green-500 h-3 rounded-full transition-all"
                        style={{ width: `${percentage}%` }}
                      ></div>
                    </div>
                    <span className="text-sm font-bold text-green-600 w-12">
                      {percentage}%
                    </span>
                  </div>
                </div>
              );
            })}
          </div>
        </div>

        <div className="bg-white rounded-2xl shadow-lg p-6">
          <h3 className="text-xl font-bold text-gray-800 mb-4">‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü / Gov. Reporting</h3>
          <div className="space-y-4">
            <div className="flex justify-between items-center py-2">
              <span>‡§Æ‡§ø‡§°-‡§°‡•á ‡§Æ‡•Ä‡§≤ / Mid-day Meal</span>
              <span className="font-bold text-blue-600">147 ‡§õ‡§æ‡§§‡•ç‡§∞</span>
            </div>
            <div className="flex justify-between items-center py-2">
              <span>‡§î‡§∏‡§§ ‡§â‡§™‡§∏‡•ç‡§•‡§ø‡§§‡§ø / Avg Attendance</span>
              <span className="font-bold text-green-600">83.2%</span>
            </div>
            <div className="flex justify-between items-center py-2">
              <span>‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§Æ‡•á‡§Ç / At Risk (&lt; 75%)</span>
              <span className="font-bold text-red-600">12 ‡§õ‡§æ‡§§‡•ç‡§∞</span>
            </div>
          </div>
          
          <button className="w-full mt-6 bg-gradient-to-r from-purple-600 to-purple-700 text-white py-4 rounded-xl font-semibold hover:from-purple-700 hover:to-purple-800 transition-all transform active:scale-95">
            üìä ‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü / Monthly Report
          </button>
        </div>

        <div className="bg-white rounded-2xl shadow-lg p-6">
          <h3 className="text-xl font-bold text-gray-800 mb-4">‡§°‡•á‡§ü‡§æ ‡§∏‡§ø‡§Ç‡§ï / Data Sync</h3>
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <span>‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§∏‡§ø‡§Ç‡§ï / Last Sync</span>
              <span className="text-sm text-gray-600 font-medium">
                {isOffline ? '‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§ø‡§§ (‡§ë‡§´‡§≤‡§æ‡§á‡§®)' : '2 ‡§Æ‡§ø‡§®‡§ü ‡§™‡§π‡§≤‡•á'}
              </span>
            </div>
            <div className="flex items-center justify-between">
              <span>‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° / Pending</span>
              <span className={`text-sm font-bold ${isOffline ? 'text-red-600' : 'text-green-600'}`}>
                {isOffline ? '23 ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°' : '0 ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°'}
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  return (
    <div className="font-sans">
      {currentView === 'login' && <LoginView />}
      {currentView === 'dashboard' && <DashboardView />}
      {currentView === 'attendance' && <AttendanceView />}
      {currentView === 'reports' && <ReportsView />}
    </div>
  );
};

export default AttendanceApp;
